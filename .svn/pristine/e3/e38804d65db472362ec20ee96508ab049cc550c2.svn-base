package view;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.util.ArrayList;

import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;

import executer.Executer;
import model.Ball;
import model.Bar;
import model.Brick;
import model.Grid;

@SuppressWarnings("serial")
public class MainFrame extends JPanel{

	private Graphics gs;
	private Bar bar;
	private Ball ball;
	private ArrayList<Brick> listOfBricks;
	private Grid grid;
	private final Color[] colorList = {new Color(245,129,71), new Color(29,124,188), new Color(90,213,193),
			new Color(152,213, 90), new Color(243, 243, 85), new Color(245, 187, 71), new Color(29,124,188) };
	
	private JLabel gameInfoLabel;

	public MainFrame() {

		bar = new Bar();
		ball = new Ball();
		grid = Grid.getInstance();
		listOfBricks = new ArrayList<Brick>();
		gameInfoLabel = new JLabel();
		this.add(gameInfoLabel);

		this.setPreferredSize(new Dimension(Executer.WIN_WIDTH, Executer.WIN_HEIGHT));
		this.setBorder(new EmptyBorder(0, 0, 0, 0));
		this.setOpaque(false);
		this.setFocusable(true);	
		
	}

	@Override
	public void paintComponent(Graphics g) {
		super.paintComponent(g);
		setGraph(g);
		paintBar(bar);
		paintBall(ball);
		paintBricks(listOfBricks);
	}
	
	public void repaintAll(){
		paintBar(bar);
		paintBall(ball);
		paintBricks(listOfBricks);
	}

	public Bar getBar() {
		return bar;
	}

	public Ball getBall() {
		return ball;
	}

	public ArrayList<Brick> getBricks() {
		return listOfBricks;
	}
	
	public void updateGameInfoPanel(int life, int maxLife, int score){
		gameInfoLabel.setText("<html>Vies restantes : "+life+" / "+maxLife + 
							   "<br>Score : "+ score+"</html>");
	}

	/**
	 * Drawing of the bar
	 */
	public void paintBar(Bar theBar) {
		if (gs == null)
			gs = this.getGraphics();

		try {
			
			gs.setColor(new Color(0, 0, 0));
			
			gs.fillRect(theBar.getX() - theBar.getWidth() / 2, theBar.getY() - theBar.getHeight()
					/ 2, theBar.getWidth(), theBar.getHeight());
			
			gs.setColor(new Color(245, 227, 71));
			
			gs.fillRect(theBar.getX() + 2 - theBar.getWidth() / 2, theBar.getY() + 2 - theBar.getHeight()
					/ 2, theBar.getWidth() - 4, theBar.getHeight() - 4);
			
		} catch (Exception e) {
			System.err.println("paintBar " + e.getMessage());
		}
		
		
		
		try {
			
		} catch (Exception e) {
			System.err.println("paintBar " + e.getMessage());
		}
		bar = theBar;
	}

	/**
	 * Drawing of the ball
	 */
	public void paintBall(Ball theBall) {
		if (gs == null)
			gs = this.getGraphics();

		gs.setColor(new Color(132, 55, 45));
		
		try {
			gs.fillOval(theBall.getXInt() - theBall.getRadius(),
					theBall.getYInt() - theBall.getRadius(), theBall.getRadius() * 2,
					theBall.getRadius() * 2);
		} catch (Exception e) {
			System.err.println("paintBall " + e.getMessage());
		}

		ball = theBall;
	}

	public void paintBricks(ArrayList<Brick> listOfBrick) {
		if (gs == null)
			gs = this.getGraphics();

		for (int i = 0; i < listOfBrick.size(); i++) {
			Brick theBrick = listOfBrick.get(i);
			gs.setColor(Color.WHITE);
			try {
				gs.fillRect(grid.getXLeftFromBrick(theBrick) + 1,
						grid.getYTopFromBrick(theBrick) + 1, grid.getBrickWidth() - 2,
						grid.getBrickHeight() - 2);

			} catch (Exception e) {
				System.err.println(e.getMessage());
			}

			gs.setColor(colorList[(theBrick.getY()) % 6]);
			try {
				gs.fillRect(grid.getXLeftFromBrick(theBrick) + 2,
						grid.getYTopFromBrick(theBrick) + 2, grid.getBrickWidth() - 4,
						grid.getBrickHeight() - 4);

			} catch (Exception e) {
				System.err.println("paintBricks " + e.getMessage());
			}

		}

		this.listOfBricks = listOfBrick;
	}


	public void setGraph(Graphics g) {
		gs = g;
	}

	public void getBricksSquare(ArrayList<Brick> listOfBricks) {
		this.listOfBricks = listOfBricks;
	}

	public void setBall(Ball newBall) {
		this.ball = newBall;
	}
	
	public void setBar(Bar newBar) {
		this.bar = newBar;
	}

	public void setBrickList(ArrayList<Brick> newListOfBricks) {
		this.listOfBricks = newListOfBricks;
	}
}
